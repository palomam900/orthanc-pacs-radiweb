#!/bin/bash

# Script de Setup do Orthanc PACS Radiweb
# Autor: Manus AI
# Data: $(date +%Y-%m-%d)

set -e

echo "üè• Configurando Orthanc PACS Radiweb..."
echo "========================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se Docker est√° instalado
check_docker() {
    if ! command -v docker &> /dev/null; then
        error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
        exit 1
    fi
    
    log "Docker e Docker Compose encontrados ‚úì"
}

# Criar arquivo .env se n√£o existir
setup_env() {
    if [ ! -f .env ]; then
        log "Criando arquivo .env..."
        cp .env.example .env
        
        # Gerar senhas seguras
        POSTGRES_PASS=$(openssl rand -base64 32)
        ADMIN_PASS=$(openssl rand -base64 16)
        VIEWER_PASS=$(openssl rand -base64 16)
        
        # Substituir no arquivo .env
        sed -i "s/orthanc_secure_password_2024/$POSTGRES_PASS/g" .env
        sed -i "s/admin_radiweb_2024/$ADMIN_PASS/g" .env
        sed -i "s/viewer_radiweb_2024/$VIEWER_PASS/g" .env
        
        log "Arquivo .env criado com senhas seguras geradas automaticamente"
        warn "IMPORTANTE: Anote as credenciais geradas:"
        echo "  - Admin: admin / $ADMIN_PASS"
        echo "  - Viewer: viewer / $VIEWER_PASS"
        echo "  - PostgreSQL: orthanc / $POSTGRES_PASS"
    else
        log "Arquivo .env j√° existe ‚úì"
    fi
}

# Criar certificados SSL self-signed para desenvolvimento
create_ssl_certs() {
    if [ ! -f ssl/certificate.pem ]; then
        log "Criando certificados SSL self-signed para desenvolvimento..."
        
        mkdir -p ssl
        
        # Gerar certificado self-signed
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout ssl/private.key \
            -out ssl/certificate.crt \
            -subj "/C=BR/ST=SP/L=S√£o Paulo/O=Radiweb/OU=PACS/CN=pacs.radiweb.com.br"
        
        # Combinar chave e certificado
        cat ssl/private.key ssl/certificate.crt > ssl/certificate.pem
        
        log "Certificados SSL criados ‚úì"
        warn "ATEN√á√ÉO: Estes s√£o certificados self-signed apenas para desenvolvimento!"
        warn "Para produ√ß√£o, use certificados v√°lidos (Let's Encrypt, etc.)"
    else
        log "Certificados SSL j√° existem ‚úì"
    fi
}

# Configurar permiss√µes
setup_permissions() {
    log "Configurando permiss√µes dos diret√≥rios..."
    
    # Criar diret√≥rios se n√£o existirem
    mkdir -p data/orthanc data/postgres logs
    
    # Configurar permiss√µes
    chmod 755 data/orthanc data/postgres
    chmod 600 ssl/private.key 2>/dev/null || true
    chmod 644 ssl/certificate.crt 2>/dev/null || true
    chmod 600 ssl/certificate.pem 2>/dev/null || true
    
    log "Permiss√µes configuradas ‚úì"
}

# Validar configura√ß√£o do Orthanc
validate_config() {
    log "Validando configura√ß√£o do Orthanc..."
    
    if [ ! -f config/orthanc.json ]; then
        error "Arquivo config/orthanc.json n√£o encontrado!"
        exit 1
    fi
    
    # Verificar se √© um JSON v√°lido (b√°sico)
    if ! python3 -m json.tool config/orthanc.json > /dev/null 2>&1; then
        error "Arquivo config/orthanc.json cont√©m JSON inv√°lido!"
        exit 1
    fi
    
    log "Configura√ß√£o do Orthanc validada ‚úì"
}

# Fun√ß√£o para iniciar os servi√ßos
start_services() {
    log "Iniciando servi√ßos..."
    
    # Parar servi√ßos existentes
    docker-compose down 2>/dev/null || true
    
    # Iniciar servi√ßos
    docker-compose up -d
    
    log "Aguardando servi√ßos ficarem prontos..."
    sleep 10
    
    # Verificar status dos servi√ßos
    if docker-compose ps | grep -q "Up"; then
        log "Servi√ßos iniciados com sucesso ‚úì"
        
        echo ""
        echo "üéâ Orthanc PACS Radiweb configurado com sucesso!"
        echo "=============================================="
        echo ""
        echo "üìã Informa√ß√µes de acesso:"
        echo "  - URL HTTP: http://localhost"
        echo "  - URL HTTPS: https://localhost (certificado self-signed)"
        echo "  - Porta DICOM: 4242"
        echo "  - Stone Web Viewer: http://localhost/stone-webviewer/"
        echo ""
        echo "üîê Credenciais (verifique o arquivo .env para senhas atuais):"
        echo "  - Usu√°rio Admin: admin"
        echo "  - Usu√°rio Viewer: viewer"
        echo ""
        echo "üìä Monitoramento:"
        echo "  - Status: docker-compose ps"
        echo "  - Logs: docker-compose logs -f"
        echo "  - Health: curl http://localhost/health"
        echo ""
        echo "üõ†Ô∏è  Comandos √∫teis:"
        echo "  - Parar: docker-compose down"
        echo "  - Reiniciar: docker-compose restart"
        echo "  - Atualizar: docker-compose pull && docker-compose up -d"
        echo ""
    else
        error "Falha ao iniciar alguns servi√ßos. Verifique os logs:"
        docker-compose logs
        exit 1
    fi
}

# Fun√ß√£o para mostrar status
show_status() {
    echo ""
    echo "üìä Status dos servi√ßos:"
    docker-compose ps
    
    echo ""
    echo "üîç Health checks:"
    
    # Verificar Orthanc
    if curl -s http://localhost/system > /dev/null 2>&1; then
        echo "  ‚úì Orthanc: OK"
    else
        echo "  ‚úó Orthanc: Falha"
    fi
    
    # Verificar Nginx
    if curl -s http://localhost/health > /dev/null 2>&1; then
        echo "  ‚úì Nginx: OK"
    else
        echo "  ‚úó Nginx: Falha"
    fi
    
    # Verificar PostgreSQL
    if docker-compose exec -T postgres pg_isready -U orthanc > /dev/null 2>&1; then
        echo "  ‚úì PostgreSQL: OK"
    else
        echo "  ‚úó PostgreSQL: Falha"
    fi
}

# Menu principal
main_menu() {
    echo ""
    echo "üè• Orthanc PACS Radiweb - Menu de Setup"
    echo "======================================"
    echo "1. Setup completo (recomendado)"
    echo "2. Apenas configurar ambiente"
    echo "3. Apenas criar certificados SSL"
    echo "4. Iniciar servi√ßos"
    echo "5. Mostrar status"
    echo "6. Parar servi√ßos"
    echo "7. Sair"
    echo ""
    read -p "Escolha uma op√ß√£o [1-7]: " choice
    
    case $choice in
        1)
            check_docker
            setup_env
            create_ssl_certs
            setup_permissions
            validate_config
            start_services
            show_status
            ;;
        2)
            setup_env
            setup_permissions
            ;;
        3)
            create_ssl_certs
            ;;
        4)
            start_services
            ;;
        5)
            show_status
            ;;
        6)
            log "Parando servi√ßos..."
            docker-compose down
            log "Servi√ßos parados ‚úì"
            ;;
        7)
            log "Saindo..."
            exit 0
            ;;
        *)
            error "Op√ß√£o inv√°lida!"
            main_menu
            ;;
    esac
}

# Verificar se foi passado argumento
if [ $# -eq 0 ]; then
    main_menu
else
    case $1 in
        "setup")
            check_docker
            setup_env
            create_ssl_certs
            setup_permissions
            validate_config
            start_services
            show_status
            ;;
        "start")
            start_services
            ;;
        "stop")
            docker-compose down
            ;;
        "status")
            show_status
            ;;
        "logs")
            docker-compose logs -f
            ;;
        *)
            echo "Uso: $0 [setup|start|stop|status|logs]"
            exit 1
            ;;
    esac
fi

