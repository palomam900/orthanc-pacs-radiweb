version: '3.8'

# Docker Compose para VPS/Servidor Dedicado
# Inclui Certbot para Let's Encrypt e configurações otimizadas

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: orthanc-postgres-vps
    restart: always
    environment:
      POSTGRES_DB: orthanc
      POSTGRES_USER: orthanc
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - orthanc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orthanc"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Orthanc PACS Server
  orthanc:
    image: orthancteam/orthanc:24.5.0
    container_name: orthanc-server-vps
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Stone Web Viewer
      STONE_WEB_VIEWER_PLUGIN_ENABLED: "true"
      DICOM_WEB_PLUGIN_ENABLED: "true"
      
      # Database
      POSTGRESQL_PLUGIN_ENABLED: "true"
      POSTGRESQL_HOST: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_DATABASE: orthanc
      POSTGRESQL_USERNAME: orthanc
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_LOCK: "true"
      
      # Basic Configuration
      ORTHANC_NAME: ${ORTHANC_NAME:-"RADIWEB_PACS"}
      DICOM_AET: ${DICOM_AET:-"RADIWEB_PACS"}
      DICOM_PORT: 4242
      HTTP_PORT: 8042
      
      # Security
      REMOTE_ACCESS_ALLOWED: "true"
      AUTHENTICATION_ENABLED: "true"
      REGISTERED_USERS: |
        {
          "admin": "${ADMIN_PASSWORD}",
          "viewer": "${VIEWER_PASSWORD}",
          "api": "${API_PASSWORD}"
        }
      
      # Advanced Security
      WEBDAV_ENABLED: "false"
      EXECUTE_LUA_ENABLED: "false"
      REST_API_WRITE_TO_FILE_SYSTEM_ENABLED: "false"
      ORTHANC_EXPLORER_ENABLED: "false"
      
      # Performance
      CONCURRENT_JOBS: ${CONCURRENT_JOBS:-4}
      MAXIMUM_STORAGE_SIZE: ${MAX_STORAGE_SIZE:-0}
      STORAGE_COMPRESSION: ${STORAGE_COMPRESSION:-false}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-"default"}
      VERBOSE_ENABLED: "false"
      TRACE_ENABLED: "false"
    
    volumes:
      - ./config/orthanc.json:/etc/orthanc/orthanc.json:ro
      - orthanc_data:/var/lib/orthanc/db
      - ./logs:/var/log/orthanc
    
    ports:
      - "${DICOM_PORT:-4242}:4242"
    
    networks:
      - orthanc-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/system"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: orthanc-nginx-vps
    restart: always
    depends_on:
      orthanc:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/vps.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
      - certbot_webroot:/var/www/certbot:ro
      - certbot_certs:/etc/letsencrypt:ro
    networks:
      - orthanc-network
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Certbot for Let's Encrypt
  certbot:
    image: certbot/certbot:latest
    container_name: orthanc-certbot
    restart: "no"
    volumes:
      - certbot_webroot:/var/www/certbot
      - certbot_certs:/etc/letsencrypt
      - certbot_logs:/var/log/letsencrypt
    command: >
      sh -c "
        echo 'Certbot ready for certificate generation'
        echo 'Run: docker-compose exec certbot certbot certonly --webroot --webroot-path=/var/www/certbot -d ${DOMAIN_NAME} --email ${LETSENCRYPT_EMAIL} --agree-tos --no-eff-email'
        tail -f /dev/null
      "
    profiles:
      - certbot

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: orthanc-backup-vps
    restart: "no"
    depends_on:
      - postgres
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_USER: orthanc
      POSTGRES_DB: orthanc
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
      WEBHOOK_URL: ${WEBHOOK_URL:-}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
      - orthanc_data:/var/lib/orthanc/db:ro
    networks:
      - orthanc-network
    command: >
      sh -c "
        echo 'Backup service ready'
        echo 'Manual backup: docker-compose exec backup /scripts/backup.sh'
        echo 'Scheduled backup via cron: 0 2 * * * docker-compose exec backup /scripts/backup.sh'
        tail -f /dev/null
      "
    profiles:
      - backup

  # Monitoring with Watchtower
  watchtower:
    image: containrrr/watchtower
    container_name: orthanc-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *  # 4 AM daily
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${NOTIFICATION_EMAIL_FROM:-admin@radiweb.com.br}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${NOTIFICATION_EMAIL_TO:-admin@radiweb.com.br}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT:-587}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD:-}
    profiles:
      - monitoring

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: orthanc-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    networks:
      - orthanc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    profiles:
      - cache

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: orthanc-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - orthanc-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: orthanc-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - orthanc-network
    profiles:
      - monitoring

networks:
  orthanc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  orthanc_data:
    driver: local
  certbot_webroot:
    driver: local
  certbot_certs:
    driver: local
  certbot_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

