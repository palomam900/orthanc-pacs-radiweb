#!/bin/bash

# Script de Deploy Railway - Orthanc PACS Radiweb
# Autor: Manus AI
# Data: $(date +%Y-%m-%d)

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[RAILWAY]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[RAILWAY]${NC} $1"
}

error() {
    echo -e "${RED}[RAILWAY]${NC} $1"
}

info() {
    echo -e "${BLUE}[RAILWAY]${NC} $1"
}

# Banner
echo ""
echo "üöÇ Railway Deploy - Orthanc PACS Radiweb"
echo "========================================"
echo ""

# Verificar se Railway CLI est√° instalado
check_railway_cli() {
    if ! command -v railway &> /dev/null; then
        warn "Railway CLI n√£o encontrado. Instalando..."
        
        if command -v npm &> /dev/null; then
            npm install -g @railway/cli
        else
            error "NPM n√£o encontrado. Instale Node.js primeiro:"
            echo "  curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -"
            echo "  sudo apt-get install -y nodejs"
            exit 1
        fi
    fi
    
    log "Railway CLI encontrado ‚úì"
}

# Verificar login no Railway
check_railway_auth() {
    if ! railway whoami &> /dev/null; then
        warn "N√£o logado no Railway. Fazendo login..."
        railway login
    fi
    
    local user=$(railway whoami)
    log "Logado como: $user ‚úì"
}

# Criar projeto no Railway
create_railway_project() {
    local project_name="orthanc-pacs-radiweb"
    
    info "Criando projeto no Railway..."
    
    # Verificar se j√° existe um projeto linkado
    if railway status &> /dev/null; then
        local current_project=$(railway status | grep "Project:" | awk '{print $2}')
        warn "Projeto j√° linkado: $current_project"
        
        read -p "Deseja usar o projeto existente? (y/n): " use_existing
        if [ "$use_existing" != "y" ]; then
            railway unlink
        else
            log "Usando projeto existente ‚úì"
            return 0
        fi
    fi
    
    # Criar novo projeto
    railway init --name "$project_name"
    log "Projeto criado: $project_name ‚úì"
}

# Adicionar PostgreSQL
add_postgresql() {
    info "Adicionando PostgreSQL..."
    
    # Verificar se PostgreSQL j√° existe
    if railway services | grep -q "postgresql"; then
        log "PostgreSQL j√° configurado ‚úì"
        return 0
    fi
    
    # Adicionar PostgreSQL
    railway add postgresql
    log "PostgreSQL adicionado ‚úì"
    
    # Aguardar PostgreSQL ficar pronto
    info "Aguardando PostgreSQL ficar pronto..."
    sleep 30
}

# Configurar vari√°veis de ambiente
configure_environment() {
    info "Configurando vari√°veis de ambiente..."
    
    # Gerar senhas seguras
    local admin_pass=$(openssl rand -base64 24)
    local viewer_pass=$(openssl rand -base64 16)
    local api_pass=$(openssl rand -base64 16)
    local webhook_secret=$(openssl rand -base64 32)
    
    # Configurar vari√°veis principais
    railway variables set \
        ADMIN_PASSWORD="$admin_pass" \
        VIEWER_PASSWORD="$viewer_pass" \
        API_PASSWORD="$api_pass" \
        WEBHOOK_SECRET="$webhook_secret" \
        ORTHANC_NAME="RADIWEB_PACS" \
        DICOM_AET="RADIWEB_PACS" \
        ENABLE_HTTPS="true" \
        LOG_LEVEL="default" \
        CONCURRENT_JOBS="4" \
        BACKUP_ENABLED="true" \
        BACKUP_RETENTION_DAYS="7"
    
    log "Vari√°veis de ambiente configuradas ‚úì"
    
    # Salvar credenciais localmente
    cat > .env.production << EOF
# Credenciais geradas para Railway
ADMIN_PASSWORD=$admin_pass
VIEWER_PASSWORD=$viewer_pass
API_PASSWORD=$api_pass
WEBHOOK_SECRET=$webhook_secret
EOF
    
    warn "IMPORTANTE: Credenciais salvas em .env.production"
    echo "  Admin: admin / $admin_pass"
    echo "  Viewer: viewer / $viewer_pass"
    echo "  API: api / $api_pass"
    echo ""
}

# Configurar dom√≠nio
configure_domain() {
    info "Configurando dom√≠nio..."
    
    # Obter URL do Railway
    local railway_url=$(railway domain)
    
    if [ -n "$railway_url" ]; then
        log "URL Railway: $railway_url"
        
        # Atualizar vari√°vel de dom√≠nio
        railway variables set DOMAIN_NAME="$railway_url"
        
        echo ""
        info "URLs de acesso:"
        echo "  üåê Interface: https://$railway_url"
        echo "  üëÅÔ∏è  Stone Viewer: https://$railway_url/stone-webviewer/"
        echo "  üîç Health Check: https://$railway_url/health"
        echo "  üìä System Info: https://$railway_url/system"
        echo ""
        
        # Perguntar sobre dom√≠nio personalizado
        read -p "Deseja configurar dom√≠nio personalizado? (y/n): " setup_custom
        if [ "$setup_custom" = "y" ]; then
            read -p "Digite o dom√≠nio (ex: pacs.radiweb.com.br): " custom_domain
            
            if [ -n "$custom_domain" ]; then
                railway domain add "$custom_domain"
                railway variables set DOMAIN_NAME="$custom_domain"
                
                log "Dom√≠nio personalizado configurado: $custom_domain"
                warn "Configure o DNS:"
                echo "  CNAME $custom_domain $railway_url"
            fi
        fi
    else
        warn "N√£o foi poss√≠vel obter URL do Railway"
    fi
}

# Deploy da aplica√ß√£o
deploy_application() {
    info "Fazendo deploy da aplica√ß√£o..."
    
    # Verificar se h√° mudan√ßas para commit
    if ! git diff --quiet; then
        log "Commitando mudan√ßas..."
        git add .
        git commit -m "Configure Railway deployment - $(date)"
    fi
    
    # Deploy
    railway up --detach
    
    log "Deploy iniciado ‚úì"
    
    # Aguardar deploy
    info "Aguardando deploy completar..."
    sleep 60
    
    # Verificar status
    railway status
}

# Verificar sa√∫de da aplica√ß√£o
check_health() {
    info "Verificando sa√∫de da aplica√ß√£o..."
    
    local railway_url=$(railway domain)
    
    if [ -n "$railway_url" ]; then
        # Aguardar aplica√ß√£o ficar pronta
        local max_attempts=30
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
            if curl -s "https://$railway_url/health" > /dev/null 2>&1; then
                log "Aplica√ß√£o est√° saud√°vel ‚úì"
                break
            fi
            
            echo -n "."
            sleep 10
            attempt=$((attempt + 1))
        done
        
        if [ $attempt -gt $max_attempts ]; then
            error "Aplica√ß√£o n√£o respondeu no tempo esperado"
            warn "Verifique os logs: railway logs"
            return 1
        fi
        
        # Testar endpoints principais
        echo ""
        info "Testando endpoints..."
        
        if curl -s "https://$railway_url/system" > /dev/null 2>&1; then
            log "‚úì Sistema Orthanc"
        else
            warn "‚úó Sistema Orthanc n√£o responde"
        fi
        
        if curl -s "https://$railway_url/stone-webviewer/" > /dev/null 2>&1; then
            log "‚úì Stone Web Viewer"
        else
            warn "‚úó Stone Web Viewer n√£o responde"
        fi
        
    else
        error "URL do Railway n√£o encontrada"
        return 1
    fi
}

# Mostrar resumo final
show_summary() {
    local railway_url=$(railway domain)
    
    echo ""
    echo "üéâ Deploy Railway Conclu√≠do!"
    echo "============================"
    echo ""
    echo "üìã Informa√ß√µes do Deploy:"
    echo "  Projeto: $(railway status | grep "Project:" | awk '{print $2}')"
    echo "  URL: https://$railway_url"
    echo "  Status: $(railway status | grep "Status:" | awk '{print $2}')"
    echo ""
    echo "üîê Credenciais (salvas em .env.production):"
    if [ -f .env.production ]; then
        grep "ADMIN_PASSWORD\|VIEWER_PASSWORD\|API_PASSWORD" .env.production | sed 's/^/  /'
    fi
    echo ""
    echo "üåê URLs de Acesso:"
    echo "  Interface Principal: https://$railway_url"
    echo "  Stone Web Viewer: https://$railway_url/stone-webviewer/"
    echo "  API REST: https://$railway_url/studies"
    echo "  Health Check: https://$railway_url/health"
    echo ""
    echo "üìä Comandos √öteis:"
    echo "  Ver logs: railway logs"
    echo "  Status: railway status"
    echo "  Vari√°veis: railway variables"
    echo "  Redeploy: railway up"
    echo ""
    echo "üîß Configura√ß√£o DICOM:"
    echo "  AE Title: RADIWEB_PACS"
    echo "  Host: $railway_url"
    echo "  Porta: 4242"
    echo ""
    echo "‚ö†Ô∏è  Pr√≥ximos Passos:"
    echo "  1. Testar envio de imagens DICOM"
    echo "  2. Configurar webhook no sistema Radiweb"
    echo "  3. Configurar backup automatizado"
    echo "  4. Configurar monitoramento"
    echo ""
}

# Menu principal
main_menu() {
    echo "Escolha uma op√ß√£o:"
    echo "1. Deploy completo (recomendado)"
    echo "2. Apenas criar projeto"
    echo "3. Apenas configurar vari√°veis"
    echo "4. Apenas fazer deploy"
    echo "5. Verificar status"
    echo "6. Ver logs"
    echo "7. Sair"
    echo ""
    read -p "Op√ß√£o [1-7]: " choice
    
    case $choice in
        1)
            check_railway_cli
            check_railway_auth
            create_railway_project
            add_postgresql
            configure_environment
            deploy_application
            configure_domain
            check_health
            show_summary
            ;;
        2)
            check_railway_cli
            check_railway_auth
            create_railway_project
            add_postgresql
            ;;
        3)
            configure_environment
            ;;
        4)
            deploy_application
            ;;
        5)
            railway status
            ;;
        6)
            railway logs
            ;;
        7)
            log "Saindo..."
            exit 0
            ;;
        *)
            error "Op√ß√£o inv√°lida!"
            main_menu
            ;;
    esac
}

# Verificar argumentos
if [ $# -eq 0 ]; then
    main_menu
else
    case $1 in
        "deploy")
            check_railway_cli
            check_railway_auth
            create_railway_project
            add_postgresql
            configure_environment
            deploy_application
            configure_domain
            check_health
            show_summary
            ;;
        "status")
            railway status
            ;;
        "logs")
            railway logs
            ;;
        "help")
            echo "Uso: $0 [deploy|status|logs|help]"
            ;;
        *)
            error "Comando inv√°lido: $1"
            echo "Uso: $0 [deploy|status|logs|help]"
            exit 1
            ;;
    esac
fi

