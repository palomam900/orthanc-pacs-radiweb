version: '3.8'

services:
  # PostgreSQL Database (Produção)
  postgres:
    image: postgres:15-alpine
    container_name: orthanc-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: orthanc
      POSTGRES_USER: orthanc
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - orthanc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orthanc"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Orthanc PACS Server (Produção)
  orthanc:
    image: orthancteam/orthanc:24.5.0
    container_name: orthanc-server-prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Stone Web Viewer
      STONE_WEB_VIEWER_PLUGIN_ENABLED: "true"
      DICOM_WEB_PLUGIN_ENABLED: "true"
      
      # Database
      POSTGRESQL_PLUGIN_ENABLED: "true"
      POSTGRESQL_HOST: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_DATABASE: orthanc
      POSTGRESQL_USERNAME: orthanc
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_LOCK: "true"
      
      # Basic Configuration
      ORTHANC_NAME: ${ORTHANC_NAME:-"RADIWEB_PACS"}
      DICOM_AET: ${DICOM_AET:-"RADIWEB_PACS"}
      DICOM_PORT: 4242
      HTTP_PORT: 8042
      
      # Security (Produção)
      REMOTE_ACCESS_ALLOWED: "true"
      AUTHENTICATION_ENABLED: "true"
      REGISTERED_USERS: |
        {
          "admin": "${ADMIN_PASSWORD}",
          "viewer": "${VIEWER_PASSWORD}",
          "api": "${API_PASSWORD}"
        }
      
      # Advanced Security
      WEBDAV_ENABLED: "false"
      EXECUTE_LUA_ENABLED: "false"
      REST_API_WRITE_TO_FILE_SYSTEM_ENABLED: "false"
      ORTHANC_EXPLORER_ENABLED: "false"
      
      # Performance
      CONCURRENT_JOBS: ${CONCURRENT_JOBS:-4}
      MAXIMUM_STORAGE_SIZE: ${MAX_STORAGE_SIZE:-0}
      STORAGE_COMPRESSION: ${STORAGE_COMPRESSION:-false}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-"default"}
      VERBOSE_ENABLED: "false"
      TRACE_ENABLED: "false"
    
    volumes:
      - ./config/orthanc.json:/etc/orthanc/orthanc.json:ro
      - orthanc_data:/var/lib/orthanc/db
      - ./logs:/var/log/orthanc
    
    ports:
      - "${DICOM_PORT:-4242}:4242"
    
    networks:
      - orthanc-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/system"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Nginx Reverse Proxy (Produção)
  nginx:
    image: nginx:1.25-alpine
    container_name: orthanc-nginx-prod
    restart: always
    depends_on:
      orthanc:
        condition: service_healthy
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - orthanc-network
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup Service (Opcional)
  backup:
    image: postgres:15-alpine
    container_name: orthanc-backup
    restart: "no"
    depends_on:
      - postgres
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    networks:
      - orthanc-network
    command: >
      sh -c "
        echo 'Backup service ready. Use: docker-compose exec backup /scripts/backup.sh'
        tail -f /dev/null
      "
    profiles:
      - backup

  # Monitoring (Opcional)
  watchtower:
    image: containrrr/watchtower
    container_name: orthanc-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *  # 4 AM daily
      - WATCHTOWER_INCLUDE_STOPPED=true
    profiles:
      - monitoring

networks:
  orthanc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  orthanc_data:
    driver: local

